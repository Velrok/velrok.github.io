<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | Mein(un)sinn]]></title>
  <link href="http://Velrok.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://Velrok.github.io/"/>
  <updated>2015-01-02T11:33:50+00:00</updated>
  <id>http://Velrok.github.io/</id>
  <author>
    <name><![CDATA[velrok]]></name>
    <email><![CDATA[]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Versioning work notes with git on Mac]]></title>
    <link href="http://Velrok.github.io/blog/2014/12/05/versioning-work-notes-with-git-on-mac/"/>
    <updated>2014-12-05T14:36:00+00:00</updated>
    <id>http://Velrok.github.io/blog/2014/12/05/versioning-work-notes-with-git-on-mac</id>
    <content type="html"><![CDATA[<p>I started to keep a loose log of todo's and related useful information at work.
This log is a simple text, file which I use in a append-only fashion.
New information gets added at the top, using markdown notation.</p>

<p>Our company provides we with a Google Account, so I put my notes into
Google Drive to back it up. You can choose Dropbox or a private git repository
for hat matter.</p>

<p>But having just a plain file, makes it hard to keep track of when an entry was
made. So I started to use git to take care of the versioning for me.
I still keep my files in Google Drive and do not push the git repository,
because I'm only
interested in the versioning, and not in collaboration of backup.</p>

<p>However I would like for commits to happen on a regular basis instead of me
having to remember to also make a commit after changing a file.</p>

<p>Since the usage of cron is discouraged on mac I looked into using apples
<code>launchctr deamon</code>.</p>

<p>Launch Control works by loading job descriptions from <code>.plist</code> files, which
are noting more than xml files, which are easy enough to write my hand.</p>

<p>You will find your Launch Control files in <code>~/Library/LaunchAgents</code>.</p>

<p>Here is the plist file I use for my notes <code>velrok.gittify-notes.plist</code>:</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;velrok.gittify-notes.plist&lt;/string&gt;

&lt;key&gt;WorkingDirectory&lt;/key&gt;
&lt;string&gt;/Users/velok/Google Drive/notes&lt;/string&gt;

&lt;key&gt;WatchPaths&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;/Users/velok/Google Drive/notes&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;git&lt;/string&gt;
    &lt;string&gt;commit&lt;/string&gt;
    &lt;string&gt;-a&lt;/string&gt;
    &lt;string&gt;-m&lt;/string&gt;
    &lt;string&gt;"snapshot"&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;ProcessType&lt;/key&gt;
&lt;string&gt;Background&lt;/string&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<p><code>WorkingDirectory</code> sets the working directory for all the program calls, which
makes it very convenient to write out the necessary git calls.</p>

<p><code>WatchPaths</code> defines an array of path to watch for changes, which is a
perfect fit for my notes versioning problem, because it facilitates the triggering
of commits every time I save, but not during the long hours I might not change
anything at all.</p>

<p><code>ProgramArguments</code> is essentially the command line call separated in its components.
I'm simply adding all the changed files and create a commit with a fixed message.</p>

<p>You will obviously have to have your notes directory initialized as a
git repository <code>git init</code>.</p>

<p>If it also contains files that you do not wish to have included I would recommend
adding them to a <code>.gitignore</code> file.</p>

<p>To actually register this job and have Launch Control run it you have to load
your file <code>launchctl load velrok.gittify-notes.plist</code>.
To stop execution of your script you need to unload it
<code>launchctl unload velrok.gittify-notes.plist</code>.</p>

<p>Now you should have your git versioned directory of plain text notes
running and the launchctrl daemon trigger new commits every time you save
your notes file. There is a slight delay of a couple of seconds between the
save and the actual commit. Just run "git log" in your notes directory to see
a log of commits.
A call to <code>git blame notes.md</code> will show you the file contents with
time stamps next to each line, so you know, when they changed last.</p>
]]></content>
  </entry>
  
</feed>
